{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\fi720\pardirnatural

\f0\b\fs28 \cf0 Right-Sizing Test Methods
\b0 \
\
A test condition is something we need to prove the SUT really does; it can be described in terms of what the starting state of the SUT is, how we exercise the SUT, how we expect the SUT to respond, and what the ending state of the SUT is expected to be. A test method is a sequence of statements in our test DSL that exercises one or more test conditions. What should we include in a single test method?\
\
Fig 12.1 the four phases of a typical test. Each test method implements a four phase test that ideally verifies a single test condition. Not all phases of the four phase test need be in the test method.\
\
Verifying one condition per test gives good defect localization. That is, when a test fails you know exactly what is wrong in the SUT because each test verifies exactly one test condition. A test that verifies a single test condition executes a single code path through the SUT and it should execute exactly the same path each time it runs; that is what makes it a repeatable test. \
\
That means we need as many test methods as we have paths through the code - but how else an we expect to achieve full code coverage. What makes this pattern manageable is that we isolate the SUT when we write unit tests for each class so we only have to focus on paths through a single object. Also because each test should verify only a single path through the code, each test method should consist of strictly sequential statements that describe what should happen on that one path. \
\
A test method that contains conditional test logic is a sign of a test trying to accommodate different circumstances because it does not have control of all indirect inputs of the SUT or because it is trying to verify complex expected states on an inline basis within the test method.\
\
Another reason we verify one condition per test is to minimize test overlap so that we have fewer tests to modify if we later modify the behavior of the SUT.\
}