{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\fi720\pardirnatural

\f0\b\fs28 \cf0 Make \'93amount\'94 private\

\b0 \
Now that we have defined equality, we can use it to make our tests more expressive. Conceptually the operation times should return a Dollar whose value is the value of the receiver times the multiplier. Our test doesn\'92t exactly say that:\
\
Test_multiplication\
Five = Dollar.new(5)\
Product = five.times(2)\
Assert(10, product.amount)\
Product = five.times(3)\
Assert(15, product.amount)\
\
We can rewrite the first assertion to compare Dollars to Dollars\
\
Test_multiplication\
Five = Dollar.new(5)\
Product = five.times(2)\
Assert(Dollar.new(10), product)\
Product = five.times(3)\
Assert(15, product.amount)\
\
That looks better, so we rewrite the second assertion, too:\
\
Test_multiplication\
  Five = Dollar.new(5)\
  Product = five.times(2)\
  Assert(Dollar.new(10), product)\
Product = five.times(3)\

\b Assert(Dollar.new(15, product))\
\

\b0 Now the temporary variable \'93product\'94 isn\'92t helping much, so we can inline it:\
\
Test_multiplication\
Five = Dollar.new(5)\
Assert(Dollar.new(10), five.times(2))\
Assert(Dollar.new(15), five.times(3))\
\
This test speaks to us more clearly, as if it were an assertion of truth, not a sequence of operations.\
\
With these changes to the test, Dollar is now the only class using its \'93amount\'94 instance variable, so we can make it private:\
\
Code goes here\'85\
\
And we cross another item off the list. Notice that we have opened ourselves up to a risk. If the test for equality fails to accurately check that equality is working, the test for multiplication could also fail to accurately check that multiplication is working. That is a risk you actively manage in TDD. We aren\'92t striving for perfection. By saying everything two ways, as both code and tests, we hope to reduce our defects enough to move forward with confidence. From time to time our reasoning will fail us and a defect will slip through. When that happens, we learn our lesson about the test we should have written and move on. The rest of the time we go forward boldly under green.\
\
Reviewing, we:\
\
Used functionality just developed to improve a test\
Noticed that if two tests fail at once we\'92re sunk\
Proceeded in spite of the risk\
Used new functionality in the object under test to reduce coupling between the tests and the code.\
}