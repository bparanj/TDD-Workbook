{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\fi720\pardirnatural

\f0\b\fs28 \cf0 Assertion
\b0 \
\
How do you check that tests worked correctly? Write boolean expressions that automate your judgment about whether the code worked.\
\
The test should not be dependent on the implementation. It should use only public protocol. Wishing for white box testing is not a testing problem, it is a design problem. Any time I want to use a variable as a way of checking to see whether code ran correctly or not, I have an opportunity to improve the design. It is a good practice to adopt the convention that all assertions must be accompanied by an informative error message.\
\

\b Fixture
\b0  \
\
How do you create common objects needed by several tests? Covert the local variables in the tests into instance variables. Override setup and initialize those variables.\
\
If we want to remove duplication from our model code, do we want to remove it also from our test code? Maybe.\
\
Here\'92s the problem - often you write more code setting up objects in an interesting state than you write manipulating them and checking results. The code for setting up the objects is the same for several tests (these objects are test\'92s fixture, also known as scaffolding). This duplication is bad:\
\
It takes a while to write, even to copy-paste, and we\'92d like test writing to be fast.\
If we need to change an interface by hand, we have to change it in several tests\
\
The same duplication, however is good. Tests written with the set-up code right there with the assertions are readable top to bottom. If we factored the setup code into a separate method we would have to remember that the method was called, and remember what the objects looked like, before we could write the rest of the test.\
\
All the tests sharing a single fixture will be methods in the same class. Tests requiring a different fixture will be in a different class.\
\

\b External Fixture
\b0 \
\
How do you release external resources in the fixture? Override tear_down and release the resources.\
\
Remember that the goal of each test is to leave the world in exactly the same state as before it ran. \
\

\b Test Method
\b0 \
\
How do you represent a single test case? As a method whose name begins with test by convention.\
\
Test methods should be easy to read, pretty much straightline code. If a test method is getting long and complicated, you need to play \'93Baby Steps\'94. The goal of the game is to write the smallest test method that represents real progress towards end goal. Three lines appears to be about the minimum, without deliberate obfuscation.\
\

\b Outlines
\b0 \
\
When I write tests, I first create a short outline of the tests I want to write, for example:\
\
/*  Adding to tuple spaces */\
/*  Taking from tuple spaces */\
/*  Reading from tuple space */\
\
These are place holders until I add specific tests under each category. When I add tests, I add another level of comments to the outline.\
/*  Adding to tuple spaces */\
/*  Taking from tuple spaces */\
/* *  Taking a non-existent  tuple * */\
/* *  Taking an existing tuple **/\
/* *  Taking multiple tuples **/\
/*  Reading from tuple space */\
\
I usually only have two or three levels to the outline. But the outline essentially becomes documentation of the contract for the class being tested. The examples here are abbreviated, but they would be more specific in a contract-like language. Immediately under the lowest level of the outline is the test case code.\
\

\b Exception Test
\b0 \
\
How do you test for expected exceptions? Catch expected exceptions and ignore them, failing only if the exception isn\'92t thrown. Catch only the particular exception we expect so if the wrong kind of exception is thrown we will be notified.\
\
\
\
\
}