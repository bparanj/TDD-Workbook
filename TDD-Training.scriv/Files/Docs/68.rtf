{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\fi720\pardirnatural

\f0\fs28 \cf0 If I have an integer and I add 1 to it, I don\'92t expect the original integer to change. I expect to to use the new value. Objects usually don\'92t behave that way. We can use objects as values, as we are using our Dollar now. The pattern for this is Value Object. One of the constraints of Value Objects is that the value of the instance variables of the object never change once they have been set in the constructor.\
\
The advantage of using Value Objects is that there is no aliasing problems. Say I have one Check and I set its amount to $5, and then I set another Check\'92s amount to the same $5. Nastiest bugs can occur when changing the first Check\'92s value inadvertently change the second Check\'92s value. This is aliasing.\
\
With value objects there is no aliasing. If I have $5, I am guaranteed that it will always be $5. If someone wants $7, they have to make an entirely new object. One implication of Value Object is all operations must return a new object, as we saw in the previous chapter. Another implication is that value objects should implement equals, since $5 is as good as another.\
\
If you use Dollar as the key to a hash you have to implement hashcode if you implement equals. We\'92ll put that in the list and get to it when it\'92s a problem.\
\

\b Updated To-Do List
\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural
\cf0 $5 + 10 CHF = $10 if rate is 2:1\
\strike \strikec0 $5 * 2 = $10\strike0\striked0 \
\strike \strikec0 Dollar side-effects?\strike0\striked0 \
Money rounding?\

\b equals
\b0 \
Hascode\
\

\b Thinking Process\
\

\b0 Think about how to test equality. First, $5 should equal $5.\
\
Etest_equality\
  Assert(Dollar.new(5).equals(Dollar.new(5)))\
\
We get a failing test. The fake implementation is to just return true:\
\
Equals(object)\
  Return true\
End\
\
You might know that true is really \'915 == 5\'92 which is really \'91amount == 5\'92 which is really \'91amount == dollar.amount\'92. For the sake of demonstrating the third and most conservative implementation strategy, triangulation, we will stay away from that approach.\
\
If two receiving stations at a known distance from each other can both measure the direction of a radio signal, there is enough information to calculate the range and bearing of the signal. This calculation is called triangulation.\
\
By analogy, when we Triangulate, we only generalize code when we have two or more examples. We briefly ignore the duplication between test and model code. When the second example demands a more general solution, then and only then do we generalize.\
\
So, to triangulate we need a second example. How about $5 != $6?\
\
Assert(Dollar.new(5).equals(Dollar.new(5)))\
Assert_false(Dollar.new(5).equals(Dollar.new(5)))\
\
Now we need to generalize equality:\
\
Equals(object)\
Return amount == object.amount\
End\
\
We could have used triangulation to drive the generalization of times also. If we had $5 x 2 = $10 and $5 x 3 = $15 we would no longer have been able to return a constant.\
\
Use Triangulation when you not sure how to refactor. If you can see how to eliminate duplication between code and tests and create the general solution, just do it. When the design thoughts just aren\'92t coming, triangulation gives you a chance to think about the problem from a slightly different direction. What axes of variability are you trying to support in your design? Make some of them vary and the answer may become clearer.\
\
So equality is done for the moment. What about comparing with null and comparing with other objects? These are commonly used operations, but not necessary at the moment, so we\'92ll add them to the list.\
\
Now that we have equality, we can directly compare Dollars to Dollars. That will let us make amount private, which is a good thing. Reviewing the above, we:\
\
1. Noticed that our design pattern (value object) implied an operation\
2. Tested for that operation\
3. Implemented it simply\
4. Didn\'92t refactor immediately, but instead tested further\
5. Refactored to capture the two cases at once\
\
\pard\tx720\fi720\pardirnatural

\b \cf0 Updated To-Do List
\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural
\cf0 $5 + 10 CHF = $10 if rate is 2:1\
\strike \strikec0 $5 * 2 = $10\strike0\striked0 \
\strike \strikec0 Dollar side-effects?\strike0\striked0 \
Money rounding?\
\strike \strikec0 equals\
\strike0\striked0 Hascode\
Equal nil\
Equal object\
\
\
\
}