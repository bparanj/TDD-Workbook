{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;\red115\green115\blue115;\red27\green27\blue27;\red125\green125\blue125;
}
\deftab720
\pard\pardeftab720

\f0\fs28 \cf0  Now we are finally ready to add the test that started it all, $5 + 10 CHF:\
\pard\pardeftab720
\cf2 \
public void \cf0 testMixedAddition() \{\
Expression fiveBucks= Money.dollar(5);\
Expression tenFrancs= Money.franc(10);\
Bank bank= \cf2 new \cf0 Bank();\
bank.addRate(\cf3 "CHF"\cf0 , \cf3 "USD"\cf0 , 2);\
Money result= bank.reduce(fiveBucks.plus(tenFrancs), \cf3 "USD"\cf0 );\
assertEquals(Money.dollar(10), result);\
\}\
\
 This is what we\'92d like to write. Unfortunately, there are a host of compile errors.\
When we were generalizing from Money to Expression, we left a lot of loose ends\
laying around. I was worried about them, but I didn\'92t want to disturb you. It\'92s disturbing\
time, now.\
\
We won\'92t be able to get the test above to compile quickly.We will make the first\
change that will ripple to the next and the next.We have two paths forward.We can\
make it work quickly by writing a more specific test and then generalizing, or we\
can trust our compiler not to let us make mistakes. I\'92m with you\'97let\'92s go slow (in\
practice I would probably just fix the rippling changes one at a time).\
\cf2 \
public void \cf0 testMixedAddition() \{\
Money fiveBucks= Money.dollar(5);\
\
 Money tenFrancs= Money.franc(10);\
Bank bank= \cf2 new \cf0 Bank();\
bank.addRate(\cf3 "CHF"\cf0 , \cf3 "USD"\cf0 , 2);\
Money result= bank.reduce(fiveBucks.plus(tenFrancs), \cf3 "USD"\cf0 );\
assertEquals(Money.dollar(10), result);\
\}\
\
The test doesn\'92t work.We get 15 USD instead of 10 USD. It\'92s as if Sum.reduce()\
isn\'92t reducing the arguments. It isn\'92t:\
\pard\pardeftab720
\cf4 Sum\
\pard\pardeftab720
\cf2 public \cf0 Money reduce(Bank bank, String to) \{\
\cf2 int \cf0 amount= augend.amount + addend.amount;\
\cf2 return new \cf0 Money(amount, to);\
\}\
\
If we reduce both of the arguments, the test should pass:\
\pard\pardeftab720
\cf4 Sum\
\pard\pardeftab720
\cf2 public \cf0 Money reduce(Bank bank, String to) \{\
\cf2 int \cf0 amount= augend. reduce(bank, to).amount +\
addend. reduce(bank, to).amount;\
\cf2 return new \cf0 Money(amount, to);\
\}\
\
And it does. Now we can begin pecking away at Moneys that should be Expressions.\
To avoid the ripple effect, we\'92ll start at the edges and work our way back to\
the test case. For example, the augend and addend can now be Expressions:\
\pard\pardeftab720
\cf4 \
Sum\
\pard\pardeftab720
\cf0  Expression augend;\
 Expression addend;\
The arguments to the Sum constructor can also be Expressions:\
\pard\pardeftab720
\cf4 Sum\
\pard\pardeftab720
\cf0 Sum( Expression augend,  Expression addend) \{\
\pard\pardeftab720
\cf2 this\cf0 .augend= augend;\
\cf2 this\cf0 .addend= addend;\
\}\
\
(Sum is starting to remind me of Composite, but not so much that I want to generalize.\
The moment we want a Sum with other than two parameters, though, I\'92m ready\
to transform it.) So much for Sum. How about Money?\
\
The argument to plus() can be an Expression:\
\pard\pardeftab720
\cf4 Money\
\pard\pardeftab720
\cf0 Expression plus(Expression addend) \{\
\pard\pardeftab720
\cf2 return new \cf0 Sum(\cf2 this\cf0 , addend);\
\}\
\
Times() can return an Expression:\
\pard\pardeftab720
\cf4 Money\
\pard\pardeftab720
\cf0 Expression times(\cf2 int \cf0 multiplier) \{\
\pard\pardeftab720
\cf2 return new \cf0 Money(amount * multiplier, currency);\
\}\
\
This suggests that Expression should include the operations plus() and times().\
That\'92s all for Money. We can now change the argument to plus() in our test case:\
\cf2 \
public void \cf0 testMixedAddition() \{\
Money fiveBucks= Money.dollar(5);\
Expression tenFrancs= Money.franc(10);\
Bank bank= \cf2 new \cf0 Bank();\
bank.addRate(\cf3 "CHF"\cf0 , \cf3 "USD"\cf0 , 2);\
Money result= bank.reduce(fiveBucks.plus(tenFrancs), \cf3 "USD"\cf0 );\
assertEquals(Money.dollar(10), result);\
\}\
\
When we change fiveBucks to an Expression, we have to make several changes.\
Fortunately we have the compiler\'92s to-do list to keep us focused. First we make the\
change:\
\cf2 \
public void \cf0 testMixedAddition() \{\
Expression fiveBucks= Money.dollar(5);\
Expression tenFrancs= Money.franc(10);\
Bank bank= \cf2 new \cf0 Bank();\
bank.addRate(\cf3 "CHF"\cf0 , \cf3 "USD"\cf0 , 2);\
Money result= bank.reduce(fiveBucks.plus(tenFrancs), \cf3 "USD"\cf0 );\
assertEquals(Money.dollar(10), result);\
\}\
\
 We are politely told that plus() is not defined for Expressions. We define it:\
\pard\pardeftab720
\cf4 Expression\
\pard\pardeftab720
\cf0 Expression plus(Expression addend);\
 And then we have to add it to Money and Sum. Money? Yes, it has to be public in\
Money:\
\pard\pardeftab720
\cf4 \
Money\
\pard\pardeftab720
\cf2 public \cf0 Expression plus(Expression addend) \{\
\cf2 return new \cf0 Sum(\cf2 this\cf0 , addend);\
\}\
 We\'92ll just stub out the implementation in Sum, and add it to our list:\
\pard\pardeftab720
\cf4 Sum\
\pard\pardeftab720
\cf2 public \cf0 Expression plus(Expression addend) \{\
\cf2 return null\cf0 ;\
\}\
\
 Now that the program compiles, the tests all run.\
We are ready to finish generalizing Money to Expression, but first we\'92ll review. We:\
\
\'95  Wrote the test we wanted, then backed off to make it achievable in one step\
\'95  Generalized (used a more abstract declaration) from the leaves back to the root\
(the test case)\
\'95  Followed the compiler when we made a change (Expression fiveBucks) which\
caused changes to ripple (added plus() to Expression, etc.)}