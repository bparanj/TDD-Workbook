{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;\red115\green115\blue115;\red27\green27\blue27;\red125\green125\blue125;
}
\pard\tx720\fi720\pardirnatural

\f0\fs28 \cf0 What is there on our list that might help us eliminate the useless subclasses? What about currency? What would happen if we introduced the notion of currency?\
\
How do we want to implement currencies at the moment? Oops. How do we want to test for currencies at the moment?\
\
We may want to have complicated objects representing currencies, with flyweight factories to ensure we create no more objects than we really need. However, for the moment Strings will do:\
\
\pard\pardeftab720
\cf2 public void \cf0  testCurrency() \{\
assertEquals(\cf3 "USD"\cf0  , Money.dollar(1).currency());\
assertEquals(\cf3 "CHF"\cf0  , Money.franc(1).currency());\
\}\
First we declare currency() in Money:\
\pard\pardeftab720
\cf4 Money\
\pard\pardeftab720
\cf2 abstract \cf0  String currency();\
\
 Then we implement it in both subclasses:\
\pard\pardeftab720
\cf4 Franc\
\pard\pardeftab720
\cf0 String currency() \{\
\pard\pardeftab720
\cf2 return \cf3 "CHF"\cf0 ;\
\}\
\pard\pardeftab720
\cf4 Dollar\
\pard\pardeftab720
\cf0 String currency() \{\
\pard\pardeftab720
\cf2 return \cf3 "USD"\cf0 ;\
\}\
\
 We want the same implementation to suffice for both classes.We could store the\
currency in an instance variable and just return the variable.\
\pard\pardeftab720
\cf4 \
Franc\
\pard\pardeftab720
\cf2 private \cf0 String currency;\
Franc(\cf2 int \cf0 amount) \{\
\cf2 this\cf0 .amount = amount;\
currency = \cf3 "CHF"\cf0 ;\
\}\
String currency() \{\
return currency;\
\}\
 We can do the same with Dollar:\
\pard\pardeftab720
\cf4 Dollar\
\pard\pardeftab720
\cf2 private \cf0 String currency;\
Dollar(\cf2 int \cf0 amount) \{\
\cf2 this\cf0 .amount = amount;\
currency = \cf3 "USD"\cf0 ;\
\}\
String currency() \{\
return currency;\
\}\
 Now we can push up the declaration of the variable and the implementation of currency(),\
since they are identical:\
\
\pard\pardeftab720
\cf4 Money\
\pard\pardeftab720
\cf2 protected \cf0 String currency;\
String currency() \{\
\cf2 return \cf0 currency;\
\}\
If we move the constant strings \'93USD\'94 and \'93CHF\'94 to the static factory methods,\
the two constructors will be identical and we can create a common implementation.\
First we\'92ll add a parameter to the constructor:\
\pard\pardeftab720
\cf4 Franc\
\pard\pardeftab720
\cf0 Franc(\cf2 int \cf0 amount, String currency) \{\
\pard\pardeftab720
\cf2 this\cf0 .amount = amount;\
\cf2 this\cf0 .currency = \cf3 "CHF"\cf0 ;\
\}\
This breaks the two callers of the constructor:\
\pard\pardeftab720
\cf4 Money\
\pard\pardeftab720
\cf2 static \cf0 Money franc(\cf2 int \cf0 amount) \{\
\cf2 return new \cf0 Franc(amount, \cf2 null\cf0 );\
\}\
\pard\pardeftab720
\cf4 Franc\
\pard\pardeftab720
\cf0 Money times(\cf2 int \cf0 multiplier) \{\
\pard\pardeftab720
\cf2 return new \cf0 Franc(amount * multiplier, \cf2 null\cf0 );\
\}\
Wait a minute! Why is Franc.times() calling the constructor instead of the factory\
method? Do we want to make this change now, or will we wait? The dogmatic\
answer is that we\'92ll wait, not interrupting what we\'92re doing. The answer in my\
practice is that I will entertain a brief interruption, but only a brief one, and I will\
never interrupt an interruption. To be realistic, we\'92ll clean up times() before proceeding:\
\pard\pardeftab720
\cf4 Franc\
\pard\pardeftab720
\cf0 Money times(\cf2 int \cf0 multiplier) \{\
\pard\pardeftab720
\cf2 return \cf0 Money.franc(amount * multiplier);\
\}\
Now the factory method can pass \'93CHF\'94:\
\
\pard\pardeftab720
\cf4 Money\
\pard\pardeftab720
\cf2 static \cf0 Money franc(\cf2 int \cf0 amount) \{\
\cf2 return new \cf0 Franc(amount, 
\b \cf3 "CHF"
\b0 \cf0 );\
\}\
And finally we can assign the parameter to the instance variable:\
\pard\pardeftab720
\cf4 Franc\
\pard\pardeftab720
\cf0 Franc(\cf2 int \cf0 amount, String currency) \{\
\pard\pardeftab720
\cf2 this\cf0 .amount = amount;\
\cf2 this\cf0 .currency = 
\b currency
\b0 ;\
\}\
I\'92m feeling defensive again about taking such teeny-tiny steps. Am I recommending\
that you actually work this way? No. I\'92m recommending that you be able to\
work this way. What I actually did just now was I worked in larger steps and made\
a stupid mistake half way through. I unwound a minute\'92s worth of changes, shifted\
to a lower gear, and did it over with little steps. I\'92m feeling better now, so we\'92ll see\
if we can make the analogous change to Dollar in one swell swoop:\
\pard\pardeftab720
\cf4 Money\
\pard\pardeftab720
\cf2 static \cf0 Money dollar(\cf2 int \cf0 amount) \{\
\cf2 return new \cf0 Dollar(amount, 
\b \cf3 "USD"
\b0 \cf0 );\
\}\
\pard\pardeftab720
\cf4 Dollar\
\pard\pardeftab720
\cf0 Dollar(\cf2 int \cf0 amount, String currency) \{\
\pard\pardeftab720
\cf2 this\cf0 .amount = amount;\
\cf2 this\cf0 .currency = 
\b currency
\b0 ;\
\}\
Money times(\cf2 int \cf0 multiplier) \{\
\pard\pardeftab720

\b \cf2 return \cf0 Money.dollar(amount * multiplier);\
\pard\pardeftab720

\b0 \cf0 \}\
And it worked first time.\
This is the kind of tuning you will be doing constantly with TDD. Are the teeny tiny\
steps feeling restrictive? Take bigger steps. Are you feeling a little unsure?\
Take smaller steps. TDD is a steering process\'97a little this way, a little that way.\
There is no right step size.\
The two constructors are now identical, so we can push up the implementation:\
\
\pard\pardeftab720
\cf4 Money\
\pard\pardeftab720
\cf0 Money(\cf2 int \cf0 amount, String currency) \{\
\pard\pardeftab720
\cf2 this\cf0 .amount = amount;\
\cf2 this\cf0 .currency = currency;\
\}\
\pard\pardeftab720
\cf4 Franc\
\pard\pardeftab720
\cf0 Franc(\cf2 int \cf0 amount, String currency) \{\
super(amount, currency);\
\}\
\pard\pardeftab720
\cf4 Dollar\
\pard\pardeftab720
\cf0 Dollar(\cf2 int \cf0 amount, String currency) \{\
super(amount, currency);\
\}\
\
We\'92re almost ready to push up the implementation of times() and eliminate the subclasses,\
but first, to review, we:\
\
\'95 Were a little stuck on big design ideas, so we worked on something small we noticed earlier\
\'95 Reconciled the two constructors by moving the variation to the caller (the factory method)\
\'95 Interrupted a refactoring for a little twist (using the factory method in times())\
\'95 Repeated an analogous refactoring (doing to Dollar what we just did to Franc) in one big step\
\'95 Pushed up the identical constructors}