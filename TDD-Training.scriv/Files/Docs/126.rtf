{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\fi720\pardirnatural

\f0\fs28 \cf0 Constructing a real Chat is painful. Most of the mocking frameworks support creating a mock class, but it makes us uncomfortable because then we\'92re defining a relationship with an implementation, not a role - we\'92re being too precise about our dependencies.\
\
Our alternative approach is to attach another object to the object that implements this disconnection policy. We\'92re emphasizing the single responsibility principle, which means each object does just one thing well and the system behavior comes from how we assemble those objects.\
\
This new check only reassures us that we\'92ve fed a message through the system and into some kind of log record - it tells us that the pieces fit together. We\'92ll write a more thorough test of the contents of a log record later. The end-to-end test now fails because, of course, there\'92s no log file to read.\
\
We already wrote that we don\'92t like to mock classes. How come we\'92re doing it here? What we care about in this test is the rendering of the values into a failure message with a severity level. The class is very limited, just a shim above the logging layer, so we don\'92t think it\'92s worth introducing another level of indirection to define the logging role. As we wrote before, we also don\'92t think it worth running against a real file since that introduces dependencies (and even worse, asynchrony) not really relevant to the functionality we are developing. We also believe logging API is unlikely to change.\
\
So, just this once, we mock the Logger class. We would not do this for a class that is internal to our code, because then we would be able to write an interface to describe the role it\'92s playing.\
\

\b Inverse Salami Development
\b0 \
\
We hope that by now you\'92re getting a sense of the rhythm of incrementally growing software, adding functionality in thin but coherent slices. For each new feature, write some tests that show what it should do, work through each of those tests changing just enough code to make it pass, restructure the code as needed either to open up space for new functionality or to reveal new concepts - then ship it.\
\
The skill is in learning how to divide requirements up into incremental slices, always having something working, always adding just one more feature. The process should feel relentless - it just keeps moving. To make this work, we have to understand how to change the code incrementally and, critically, keep the code well structured so that we can take it wherever we need to go. This is why the refactoring part of a TDD cycle is so critical - we always get into trouble when we don\'92t keep up that side of the bargain.\
\

\b Small Methods to Express Intent
\b0 \
\
Our aim is to do what we can to make each level of code as readable and self-explanatory as possible. \
\
}