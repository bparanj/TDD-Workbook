{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\fi720\pardirnatural

\f0\fs28 \cf0 In Implicit Setup, all the fixture creation logic goes into setup method. This approach can make the tests more difficult to understand because we cannot see how the pre-conditions of the test (the test fixture) correlate with the expected outcome within the test method.\
\

\b Misuse of the setup Method
\b0 \
\
The setup method is most prone to misuse when it is applied to build a general fixture with multiple distinct parts each of which is dedicated to a different test method. This can lead to slow tests. More importantly, it can lead to obscure tests by hiding the cause - effect relationship between the fixture and the expected outcome of exercising the SUT. \
\
If we do not adopt the practice of grouping the test methods into test case classes based on identical fixtures but we do use the setup method, we should build only the lowest common denominator part of the fixture in the setup method. That is, only the setup logic that will not cause problems in any of the tests should be placed in the setup method.\
\
A general fixture is a common cause of slow tests because each test spends much more time than necessary building the test fixture. It also tends to produce obscure tests because the reader cannot easily see which part of the fixture a particular test method depends on. A general fixture often evolves into a fragile fixture as the relationship between its various elements and the tests that use them is forgotten over time. Changes made to the fixture to support a newly added test may then cause existing tests to fail.\
\
}