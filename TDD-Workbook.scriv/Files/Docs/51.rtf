{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\b\fs28 \cf0 Why
\b0  \
\
We will not discuss about the reasons for testing.\
Why do you need to write one test at a time?\
Why do you need to make the test fail first?\
Why should you isolate the SUT?\
Why should you keep test logic out of production code?\
Why should we avoid reusing the end state of one test as the starting state of the next test?\
\

\b What
\b0   \
\
What is testing?\
What makes testing difficult?\
What should we test?\
What are the characteristics of a good test?\
What should be the first test?\
What should be the second test?\
What do you do when the test passes without failing?\
What do you do when a new requirement breaks an existing test?\
What do you do when get a bug report?\
What do you do when a test fails intermittently?\
What are the root causes of fragile tests?\
What does it mean when a customer test fails but no unit tests fail?\
What are the reasons for complicated tests?\
What is untestable code?\
What is a well-designed system from a testing perspective?\
What does testing concerns separately buy us?\
\

\b How\
\

\b0 How many tests is sufficient?\
How do you know the test does not have a bug?\
How can you avoid fragile tests?\
How can you achieve the benefits of having tests?\
How can test reduce risk?\
How can test introduce risk?\
How can you write repeatable test?\
How can you verify the correctness of a test?\
How can you write simple test?\
How do you communicate intent in test?\
How do you write a robust test?\
How do you avoid obscure tests?\
How do you avoid over specified software?\
How can you achieve defect localization?\
How can you keep tests independent?\
How can you isolate the SUT?\
How can you prove that all of the functionality works correctly in all possible combinations?\
How can you minimize untestable code?\
How do you name a method?\
How can we avoid multiple assertions in a test?\
How do you know it is time to create a new class by looking at your test?\
\

\b When\
\

\b0 When do you write a test?\
When do you delete a test?\
When do you use state verification?\
When do you use behavior verification?\
When is it ok to violate single assertion rule?\
\
Start learning journal entry from Principles of Test Automation - Minimize untestable code\'85}