{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\deftab720
\pard\pardeftab720\sa240

\f0\fs28 \cf0 \'95 Separate the things that change from those that stay the same. \
	Separate policy from implementation. Do not mix abstractions at different levels. Related to Dependency Inversion Principle. Find abstractions and separate generic algorithms from implementation details. When making changes, aim for changes:\
1. Additive\
    This is ideal. Open Closed Principle is used to achieve this kind of change.\
2. Localize \
    This is the next option to additive change. Use abstractions. \
\'95 Program to an interface, not an implementation. \
By programming to an interface you can separate the things that change from those that stay the same. This is accomplished by using Dependency Injection. Find the Seams in the system and inject dependencies. Program to a general types. Use polymorphism.\
\'95 Prefer composition over inheritance. Liskov Substitution Principle.\
\'95 Delegate, delegate, delegate.\
\
Source Ruby Design Patterns}