{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red0\green51\blue101;\red26\green26\blue26;
\red255\green255\blue255;\red38\green38\blue38;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid102\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid103\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 Add a test : The simplest test you can think of\
See it fail : Not compiling counts as failing\
Make all tests pass : By writing the least code possible\
Refactor : In the shortest time possible\
Repeat until done\
\

\b Rules for Adding Code\

\b0 \
Be very strict about this:\
\
Only add code to make a failing test pass\
Only add brand-new code to test methods in a test class\
Only create a new non-test methods by "extract method"\
Only create new classes as destinations for "move method"\
\
Work in pairs, "navigator" to keep you honest\
\

\b Use Version Control
\b0 \
\
Check in on every green bar\
Describe your current design thinking in the comment\
\
Optional: Publish a link to your code in the comments section.\
\
\

\b 10 Minute Check
\b0 \
\
How's it going? Who is finding it difficult to test?\
Who's written a class called Board or Game?\
\

\b Checkpoint
\b0 \
\

\b Review
\b0 \
\
Top Down / Bottom Up\
Backtracking\
\
\pard\pardeftab720\sl380\sa300
\cf2 Bob Martin{\field{\*\fldinst{HYPERLINK "http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd"}}{\fldrslt \cf3  \ul description of TDD}} :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa100
\ls1\ilvl0\cf2 {\listtext	1.	}You are not allowed to write any production code unless it is to make a failing unit test pass.\
{\listtext	2.	}You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.\
{\listtext	3.	}You are not allowed to write any more production code than is sufficient to pass the one failing unit test.\
\pard\pardeftab720\sl320
\cf4 \cb5 \
Keith Braithwaite\'92s\cf2 \cb1  rules to force the pair to allow the design to evolve:\
\
\pard\pardeftab720\sa140

\b \cf2 The Rules\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\sa100
\ls2\ilvl0
\b0 \cf2 {\listtext	1.	}Write exactly one new test, the smallest test you can that seems to point in the direction of a solution\
{\listtext	2.	}See it fail\
{\listtext	3.	}Make the test from (1) pass by writing the least implementation code you can in the test method.\'a0\
{\listtext	4.	}Refactor to remove duplication, and otherwise as required to improve the design.\'a0Be strict about using these moves:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa100
\ls2\ilvl1
\b \cf2 {\listtext	1.	}you want a new method\'97wait until refactoring time, then\'85\'a0
\b0 create new (non-test) methods by doing one of these, and in no other way:\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl360\sa100
\ls2\ilvl2\cf2 {\listtext	1.	}preferred: do Extract Method on implementation code created as per (3) to create a new method in the test class, or\
{\listtext	2.	}if you must: move implementation code as per (3) into an existing implementation method\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl360\sa100
\ls2\ilvl1
\b \cf2 {\listtext	2.	}you want a new class\'97wait until refactoring time, then\'85\'a0
\b0 create non-test classes to provide a destination for a Move\'a0Method and for no other reason\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl360\sa100
\ls2\ilvl2\cf2 {\listtext	1.	}populate implementation classes with methods by doing Move Method, and no other way\
\pard\pardeftab720\sl380\sa300
\cf2 The member of the pair without their hands on the keyboard must be very strict in enforcing these rules, especially 4.1 and 4.2\
After some respectable time coding, contrast and compare solutions. Consider the classes created. How many? How big? What mutable state? Consider the methods created How many? How long? Apply a few simple design metrics. How was the experience of working this way different from the usual? How could these ideas be applied in your day job?\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\fi360\sl288\slmult1\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://www.infoq.com/presentations/TDD-as-if-You-Meant-It"}}{\fldrslt \cf0 http://www.infoq.com/presentations/TDD-as-if-You-Meant-It}}\
\
\pard\pardeftab720\sa240
\cf0  William Wake's metaphor for the test-first cycle: a traffic light. \
\pard\pardeftab720\sa240

\b \cf6 1 The Test-First Traffic Light
\b0 \cf0 \
Test-first programming is like a traffic light. A normal traffic light has green, yellow, and red lights. It starts green, goes yellow, then red, and back to green again. Occasionally, you come across a light where the pattern is different, perhaps blinking yellow or blinking red. When you see this, you pay extra attention, and say, "What's going on?"\
It shows a green bar when all tests pass, and a red bar when any test fails. We'll think of those as green and red lights on a traffic light; failing to compile will be a yellow light. Just like a real traffic light, we expect to go green, yellow, red; green, yellow, red.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0\cf0 {\listtext	1.	}Start. (Green light!)\
{\listtext	2.	}Write a test.\
{\listtext	3.	}Try to run the test. 
\i It fails to compile, because the called routine hasn't been written yet.
\i0  (Yellow light!)\
{\listtext	4.	}Write a stub for the new routine.\
{\listtext	5.	}Try to run the test. 
\i It fails, because the stub doesn't 
\b do
\b0  anything yet.
\i0  (Red light!)\
{\listtext	6.	}Write the body of the stubbed routine.\
{\listtext	7.	}Try to run the test. 
\i It passes.
\i0  (Green light again!)\
{\listtext	8.	}Start the cycle again.\
\pard\pardeftab720

\b \cf6 \
2 Abnormal Patterns\
\
\pard\pardeftab720
\cf0 From green to green:
\b0 \
The test passed right away. Either the test is bad, or you've already implemented the feature being tested. You might consider modifying the implementation just to see the test fail.\

\b \
From green to red:
\b0 \
The test failed right away. This is OK if it's a new test of an existing routine.\

\b \
From yellow to yellow:
\b0 \
Oops - syntax error creating the stub.\

\b \
From yellow to green:
\b0 \
The test didn't compile without the stub, but adding the stub let the test pass. This is very suspicious: if a do-nothing stub makes the test work, is the test valid? This isn't to say that there 
\b is
\b0  a problem. In static language like Java and C++, if a method is declared to return something, then it 
\b must
\b0 . In this case your stub method should return the closest value to nothing, typically 0 or null. For tests that test a basis case, this often is enough to pass the test. an example is testing the length of an empty collection... it 
\i should
\i0  be zero.\

\b \
From red to yellow:
\b0 \
Oops - syntax error implementing the routine.\

\b \
From red to red:
\b0 \
New code didn't work. This happens to everyone occasionally - just fix the code. 
\b But
\b0  - if it happens a lot, it's telling you to move to smaller tests (so you'll add smaller bits of new code as well).\
\pard\pardeftab720

\b \cf6 \
3 Quick Cycle
\b0 \cf0 \
The cycle doesn't take very long:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0\cf0 {\listtext	\'95	}write test, stub, and body\
{\listtext	\'95	}compile three times\
{\listtext	\'95	}run twice\
\pard\pardeftab720\sa240
\cf0 Depending on your environment, one to five minutes might be a typically time to run through the cycle. If you find yourself spending 10 to 15 minutes or longer, the cycle is too long, and you need to move to smaller tests.\
\pard\pardeftab720

\b \cf6 4 Refactoring
\b0 \cf0 \
\pard\pardeftab720\sa240
\cf0 When you're refactoring, you're often not seeing the traffic light go yellow and red. It's more like those days when you drive down the road and hit every light green.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0\cf0 {\listtext	1.	}Start. (Green light.)\
{\listtext	2.	}Apply the refactoring.\
{\listtext	3.	}Compile and run the test. (Green light again!)\
\pard\tx560\pardeftab720
\cf0 \
\pard\pardeftab720\sa240
\cf0 You will get the occasional yellow or red light, telling you to watch your syntax, or be more careful in your transformations, or because the refactoring uses the compiler to tell what's safe. But mostly, it's green lights all the way.\
Refactoring is "improving the design of existing code."\
\pard\pardeftab720

\b \cf6 5 Example\
\pard\pardeftab720\sa240

\b0 \cf0 Let's see a small example of test-first programming. Suppose you have a person object like this:\
\pard\pardeftab720
\cf0 public class Person \{\
    String name;\
    int favorite = -1;\
\
    public Person (String name, int favorite) \{\
        this.name = name;\
        this.favorite = favorite;\
    \}\
\}\
\pard\pardeftab720\sa240
\cf0 You'd like to represent this as an XML string like this: <name>the-name</name> (if favorite is less than 0), or <name favorite="nn">the-name</name> if favorite is 0 or more.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0\cf0 {\listtext	\'95	}Start with a green light.\
{\listtext	\'95	}Create a testPerson p = new Person("Pop", -1);\
{\listtext	\'95	}assertEquals("<name>Pop</name>", p.asXml());\
{\listtext	\'95	}\
{\listtext	\'95	}When you compile, you get a syntax error (yellow light!) because the asXml() method doesn't exist.\
{\listtext	\'95	}Stub out the method on Person:public String asXml() \{return null;\}\
{\listtext	\'95	}\
{\listtext	\'95	}Compile and run; the test fails (red light!).\
{\listtext	\'95	}Implement the method as simply as possible:public String asXml() \{return "<name>" + name + "</name>";\}\
{\listtext	\'95	}\
{\listtext	\'95	}\
{\listtext	\'95	}Compile and run (green light!) - a full cycle.\
{\listtext	\'95	}We can add a second test, and see another situation:Person p2 = new Person("Mom", 1);\
{\listtext	\'95	}assertEquals("<name favorite="1">Mom</name>", p2.asXml());\
{\listtext	\'95	}\
{\listtext	\'95	}When we compile and run, we skip the yellow light, and get a red light. Why? Because asXml() exists but doesn't have the added functionality.\
{\listtext	\'95	}Implement the extra code:public String asXml() \{\
{\listtext	\'95	}    return "<name"\
{\listtext	\'95	}           + (favorite < 0 ? "" : " favorite="" + favorite + """) + ">"\
{\listtext	\'95	}           + name + "</name>";\
{\listtext	\'95	}\}\
{\listtext	\'95	}\
{\listtext	\'95	}Run the tests again (green light).\
{\listtext	\'95	}So, we've finished the task. Now it's time to look at the code we've written and consider whether refactoring is called for. You bet it is. Time for a mini-lesson on refactoring. The return string in the asXML() method is rather obtuse. Let's refactor by using the "Introduce Explaining Variable" refactoring to extract the attribute string generation:public String asXml() \{\
{\listtext	\'95	}    String favoriteAttribute = favorite < 0\
{\listtext	\'95	}                                 ? ""\
{\listtext	\'95	}                                 : "favorite="" + favorite + """;\
{\listtext	\'95	}    return "<name" + favoriteAttribute + ">" + name + "</name>";\
{\listtext	\'95	}\}\
{\listtext	\'95	}\uc0\u8232 Now, that's better. Notice that it is also easier now to add more attributes if the need arises.\
{\listtext	\'95	}Run the tests (green light).\
{\listtext	\'95	}Hmmm... I'm going to go a step further and refactor the favoriteAttribute out using "Replace Temp With Query":private String favoriteAsXml() \{\
{\listtext	\'95	}    return (favorite < 0 ? "" : "favorite="" + favorite + """; \
{\listtext	\'95	}\}\
{\listtext	\'95	}\
{\listtext	\'95	}public String asXml() \{\
{\listtext	\'95	}    return "<name" + favoriteAsXml() + ">" + name + "</name>";\
{\listtext	\'95	}\}\
{\listtext	\'95	}\
{\listtext	\'95	}Run the test, green light. See how running the tests after each refactoring gives us reassurance that we haven't broken anything and confidence to continue.\
{\listtext	\'95	}Now that the conditional expression is off on its own we can clean that up by replacing it with a more readable control structure:private String favoriteAsXml() \{\
{\listtext	\'95	}    if (favorite < 0)\
{\listtext	\'95	}        return "";\
{\listtext	\'95	}    else\
{\listtext	\'95	}        return "favorite="" + favorite + """;\
{\listtext	\'95	}\}\
{\listtext	\'95	}\
{\listtext	\'95	}Run the tests once more. Green. There. Very clean, very modular, very readable. Notice that the method I added is marked private since it is a product of refactoring and not part of the behavior/interface of the person class.\
\pard\tx560\pardeftab720
\cf0 \
\pard\pardeftab720

\b \cf6 6 Conclusion
\b0 \cf0 \
Visualize the traffic light as you code, until any abnormal pattern gives you just a little twinge.
\b \cf6  
\b0 \cf0 Flow of test-first. 
\i \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth16980\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl312\sa340

\i0\fs20 \cf0 \cell \lastrow\row
}